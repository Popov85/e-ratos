server.port = 8080
#-----------------------------------------------------RATOS-------------------------------------------------------------

# Environment variables are specified in docker-compose.yaml

# Init DB with init. data
ratos.init.re_init = false
# Populate cache on start-up {NONE, LARGE, LATEST, ALL}
ratos.init.cache = ${RATOS_INIT_CACHE}
# Specifies how many threads should do the job of loading to cache at start-up
# This value is ignored in case the previous value = none
ratos.init.cache_threads = ${RATOS_INIT_CACHE_THREADS}

# Whether we should take into account student groups when deciding if to allow access to a given schema? (TRUE/FALSE)
ratos.session.include_groups = ${RATOS_SESSION_INCLUDE_GROUPS}
# Whether we should shuffle answers each time? If true, randomizes answers of questions where possible. (TRUE/FALSE)
ratos.session.shuffle_enabled = ${RATOS_SESSION_SHUFFLE_ENABLED}
# Algorithm to randomly pick up questions from DB {SIMPLE, CACHED, DECIDE}
ratos.session.random_algorithm = ${RATOS_SESSION_RANDOM_ALGORITHM}
# How many sessions can be preserved by a user in this installation of RATOS (up to 5)
ratos.session.preserved_limit = ${RATOS_SESSION_PRESERVED_LIMIT}
# How many questions can be kept starred by a user in this installation of RATOS (up to 100)
ratos.session.starred_limit = ${RATOS_SESSION_STARRED_LIMIT}
# Should we save to DB results of time-outed, cancelled and abandoned sessions? (TRUE/FALSE)
ratos.session.save_timeouted_results = ${RATOS_SESSION_SAVE_TIMEOUTED_RESULTS}
ratos.session.save_cancelled_results = ${RATOS_SESSION_SAVE_CANCELLED_RESULTS}
ratos.session.save_abandoned_results = ${RATOS_SESSION_SAVE_ABANDONED_RESULTS}
# The percent (%) of total batch score that will be distracted in case of batch/session time-out (50)
ratos.session.timeout_penalty = ${RATOS_SESSION_TIMEOUT_PENALTY}
# The quantity of seconds that is used to compensate network round-trips between batch requests (experimental) (3)
ratos.session.tiemout_leeway = ${RATOS_SESSION_TIMEOUT_LEEWAY}

# Cleaning of the heavy result_details table with JSON serialised session details is enabled by default (TRUE/FALSE)
ratos.result.clean_on = ${RATOS_RESULT_CLEAN_ON}
# Specifies the day and time when to clean the result_details table {DAILY, WEEKLY, MONTHLY}
ratos.result.period = ${RATOS_RESULT_PERIOD}
ratos.result.clean_hour = 23
ratos.result.clean_minute = 59

# Allow student self-registration inside LMS (TRUE/FALSE)
ratos.security.lms-registration = ${RATOS_SECURITY_LMS_REGISTRATION}
# Allow student self-registration outside LMS (TRUE/FALSE)
ratos.security.non-lms-registration = ${RATOS_SECURITY_NON_LMS_REGISTRATION}

# As per LTI v1.1.1, this is the base URL which TC (LMS) should request with POST to perform launch request
# Replace localhost and port with the actual domain name before the production deployment
ratos.lti.launch_url = ${RATOS_LTI_LAUNCH_URL}
ratos.lti.launch_path = /lti/1p0/launch
# Whether we should replace https (requested) to http (actual) protocols?
ratos.lti.launch_url_fix = ${RATOS_LTI_LAUNCH_URL_FIX}

#---------------------------------------------------------------Service-------------------------------------------------

# Datasource
spring.datasource.url=jdbc:mysql://${DATABASE_HOST}:${DATABASE_PORT}/${DATABASE_NAME}?serverTimezone=UTC&rewriteBatchedStatements=true&useSSL=false
spring.datasource.username=${DATABASE_USER}
spring.datasource.password=${DATABASE_PASSWORD}
spring.datasource.driver-class-name = com.mysql.cj.jdbc.Driver
spring.datasource.hikari.maximum-pool-size=10
spring.datasource.hikari.connection-timeout=30000

spring.jpa.properties.hibernate.cache.use_second_level_cache=${HIBERNATE_ENABLE_2LC}
spring.jpa.properties.hibernate.cache.use_query_cache=${HIBERNATE_ENABLE_2LC}
spring.jpa.properties.hibernate.cache.region.factory_class=org.hibernate.cache.jcache.JCacheRegionFactory
spring.jpa.properties.hibernate.javax.cache.provider = org.ehcache.jsr107.EhcacheCachingProvider
spring.jpa.properties.javax.persistence.sharedCache.mode=ENABLE_SELECTIVE
spring.jpa.properties.hibernate.javax.cache.uri = classpath:ehcache.xml

# Cache type options: {none, simple, caffeine, redis}
spring.cache.type=${SPRING_CACHE_TYPE}
spring.cache.cache-names = question
# Make sure your cached questions are not stale (not updated) for long period!
# Basically, we encourage to update cache on daily basis (load-time/stale-period trade-off)
spring.cache.caffeine.spec=maximumSize=10000,expireAfterAccess=1d

# Should we use some specific store type for backing HttpSession? Options: {none, redis}
spring.session.store-type=${SPRING_SESSION_STORE_TYPE}
# Cron expression for expired session cleanup job. Every min by default
spring.session.redis.cleanup-cron=0 * * * * *
# Sessions flush mode.
spring.session.redis.flush-mode=on_save
# Namespace for keys used to store sessions.
spring.session.redis.namespace=spring:session

# Environment variables are specified in docker-compose.yaml
spring.redis.host=${REDIS_HOST}
spring.redis.password=${REDIS_SECRET}
spring.redis.port=${REDIS_PORT}

# Keep in mind scenario when user requested all 200 questions with 1 min per question, so that his session not expired! (200m)
server.servlet.session.timeout=${SERVLET_SESSION_TIMEOUT}
# The default value for it is 200 threads per machine
server.tomcat.max-threads=${TOMCAT_MAX_THREADS}