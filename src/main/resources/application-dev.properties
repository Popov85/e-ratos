server.port = 8090
#----------------------------------------------------RATOS--------------------------------------------------------------

# Init DB with some initial data
ratos.init.re_init = false
# Populate DB with some test data
ratos.init.populate = false
# Populate cache on start-up {NONE, LARGE, LATEST, ALL}
ratos.init.cache = NONE
# Specifies how many threads should do the job of loading to cache at start-up
# This value is ignored in case the previous value = none
ratos.init.cache_threads = 4

# Whether we should take into account student groups when deciding if to allow access to a given schema?
ratos.session.include_groups = true
# Whether we should shuffle answers each time? If true, randomizes answers of questions where possible.
ratos.session.shuffle_enabled = true
# Algorithm to randomly pick up questions from DB {SIMPLE, CACHED, DECIDE}
ratos.session.random_algorithm = CACHED
# How many sessions can be preserved by a user in this installation of RATOS
ratos.session.preserved_limit = 5
# How many questions can be kept starred by a user in this installation of RATOS
ratos.session.starred_limit = 100
# Should we save to DB results of time-outed, cancelled and abandoned sessions?
ratos.session.save_timeouted_results = true
ratos.session.save_cancelled_results = false
ratos.session.save_abandoned_results = true
# The percent (%) of total batch score that will be distracted in case of batch/session time-out
ratos.session.timeout_penalty = 50
# The quantity of seconds that is used to compensate network round-trips between batch requests (experimental)
ratos.session.tiemout_leeway = 3

# Cleaning of the heavy result_details table with JSON serialised session details is enabled by default
ratos.result.clean_on = true
# Specifies the day and time when to clean the result_details table {DAILY, WEEKLY, MONTHLY}
ratos.result.period = DAILY
ratos.result.clean_hour = 23
ratos.result.clean_minute = 59

# Allow student self-registration inside LMS
ratos.security.lms-registration = true
# Allow student self-registration outside LMS
ratos.security.non-lms-registration = true

#--------------------------------------------------------Service--------------------------------------------------------

#Datasource
spring.datasource.url=jdbc:mysql://localhost:3306/ratos3?rewriteBatchedStatements=true&useSSL=false
spring.datasource.username=root
spring.datasource.password=root
spring.datasource.driver-class-name = com.mysql.cj.jdbc.Driver
# Default value: 10
spring.datasource.hikari.maximum-pool-size=10

spring.jpa.properties.hibernate.cache.use_second_level_cache=true
spring.jpa.properties.hibernate.cache.use_query_cache=true
spring.jpa.properties.hibernate.cache.region.factory_class=org.hibernate.cache.jcache.JCacheRegionFactory
spring.jpa.properties.hibernate.javax.cache.provider = org.ehcache.jsr107.EhcacheCachingProvider
spring.jpa.properties.javax.persistence.sharedCache.mode=ENABLE_SELECTIVE
spring.jpa.properties.hibernate.javax.cache.uri = classpath:ehcache.xml


# Cache type options: {none, simple, caffeine, redis}
spring.cache.type=caffeine
spring.cache.cache-names = question
# Make sure your cached questions are not stale (not updated) for long period!
# Basically, we encourage to update cache on daily basis (load-time/stale-period trade-off)
spring.cache.caffeine.spec=maximumSize=10000,expireAfterAccess=1d

# Should we use some specific store type for backing HttpSession? Options: {none, jdbc, redis}
spring.session.store-type=none
# SPRING SESSION JDBC (JdbcSessionProperties)
# Cron expression for expired session cleanup job. Every min by default.
spring.session.jdbc.cleanup-cron=0 * * * * *
# Database schema initialization mode.
spring.session.jdbc.initialize-schema=embedded
# Path to the SQL file to use to initialize the database schema.
spring.session.jdbc.schema=classpath:org/springframework/session/jdbc/schema-mysql.sql
# Name of the database table used to store sessions.
spring.session.jdbc.table-name=SPRING_SESSION

# Cron expression for expired session cleanup job. Every min by default
spring.session.redis.cleanup-cron=0 * * * * *
# Sessions flush mode.
spring.session.redis.flush-mode=on_save
# Namespace for keys used to store sessions.
spring.session.redis.namespace=spring:session

# Replace these with production parameters
spring.redis.host=localhost
#spring.redis.password=secret
spring.redis.port=6379

# As per LTI v1.1.1, this is the base URL which TC (LMS) should request with POST to perform launch request
# Replace localhost and port with the actual domain name before the production deployment
ratos.lti.launch_url = http://localhost:8090/lti/1p0/launch
ratos.lti.launch_path = /lti/1p0/launch
# Whether we should replace https (requested) to http (actual) protocols?
ratos.lti.launch_url_fix = true

# 200 min of session inactivity, event not fires with spring session jdbc
server.servlet.session.timeout=200m
server.tomcat.max-threads=200

# Shows SQl queries
spring.jpa.properties.hibernate.show_sql=false
# Pretty sql format
spring.jpa.properties.hibernate.format_sql=true
# Statistics
spring.jpa.properties.hibernate.generate_statistics=false


