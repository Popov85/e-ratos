server.port = 8090

spring.jpa.properties.hibernate.cache.use_second_level_cache=true
spring.jpa.properties.hibernate.cache.use_query_cache=true
spring.jpa.properties.hibernate.cache.region.factory_class=org.hibernate.cache.jcache.JCacheRegionFactory
spring.jpa.properties.hibernate.javax.cache.provider = org.ehcache.jsr107.EhcacheCachingProvider
spring.jpa.properties.javax.persistence.sharedCache.mode=ENABLE_SELECTIVE
spring.jpa.properties.hibernate.javax.cache.uri = classpath:ehcache.xml

## Consider to create db scheme at start-up
spring.datasource.url=jdbc:mysql://localhost:3306/ratos3?rewriteBatchedStatements=true&useSSL=false
spring.datasource.username=root
spring.datasource.password=root
spring.datasource.driver-class-name = com.mysql.cj.jdbc.Driver
# Default value: 10
spring.datasource.hikari.maximum-pool-size=10

# Cache type options: {none, simple, caffeine, redis}
spring.cache.type=caffeine
spring.cache.cache-names = question
# Make sure your cached questions are not stale (not updated) for long period!
# Basically, we encourage to update cache on daily basis (load-time/stale-period trade-off)
spring.cache.caffeine.spec=maximumSize=10000,expireAfterAccess=1d

# Should we use some specific store type for backing HttpSession? Options: {none, jdbc, redis}
spring.session.store-type=none
# SPRING SESSION JDBC (JdbcSessionProperties)
# Cron expression for expired session cleanup job. Every min by default.
spring.session.jdbc.cleanup-cron=0 * * * * *
# Database schema initialization mode.
spring.session.jdbc.initialize-schema=embedded
# Path to the SQL file to use to initialize the database schema.
spring.session.jdbc.schema=classpath:org/springframework/session/jdbc/schema-mysql.sql
# Name of the database table used to store sessions.
spring.session.jdbc.table-name=SPRING_SESSION

# Cron expression for expired session cleanup job. Every min by default
spring.session.redis.cleanup-cron=0 * * * * *
# Sessions flush mode.
spring.session.redis.flush-mode=on_save
# Namespace for keys used to store sessions.
spring.session.redis.namespace=spring:session

# Replace these with production parameters
spring.redis.host=localhost
#spring.redis.password=secret
spring.redis.port=6379

# As per LTI v1.1.1, this is the base URL which TC (LMS) should request with POST to perform launch request
# Replace localhost and port with the actual domain name before the production deployment
ratos.lti.launch_url = http://localhost:8090/lti/1p0/launch
ratos.lti.launch_path = /lti/1p0/launch
# Whether we should replace https (requested) to http (actual) protocols?
ratos.lti.launch_url_fix = true

# Shows SQl queries
spring.jpa.properties.hibernate.show_sql=false
# Pretty sql format
spring.jpa.properties.hibernate.format_sql=true
# Statistics
spring.jpa.properties.hibernate.generate_statistics=false